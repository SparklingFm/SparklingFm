export function createClientOnly(component: any): import("vue").DefineComponent<{}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").ComponentProvideOptions, {
    name: string;
    setup(this: void, props: Readonly<import("@vue/shared").LooseRequired<{
        [x: string & `on${string}`]: (...args: any[]) => any;
    } | {
        [x: string & `on${string}`]: (...args: any[]) => any;
    }>>, { attrs, slots }: import("vue").SetupContext<import("vue").EmitsOptions>): () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
declare var _default: import("vue").DefineComponent<Readonly<{
    fallback?: any;
    placeholder?: any;
    placeholderTag?: any;
    fallbackTag?: any;
}>, (props: any) => any, any, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").ComponentProvideOptions, {
    name: string;
    props: ("fallback" | "placeholder" | "placeholderTag" | "fallbackTag")[];
    setup(_: any, { slots }: {
        slots: any;
    }): (props: any) => any;
}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<Readonly<{
    fallback?: any;
    placeholder?: any;
    placeholderTag?: any;
    fallbackTag?: any;
}>>>, {
    readonly fallback?: any;
    readonly placeholder?: any;
    readonly placeholderTag?: any;
    readonly fallbackTag?: any;
}>;
export default _default;
